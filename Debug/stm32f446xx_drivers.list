
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b04  08000b04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b10  08000b10  00010b18  2**0
                  CONTENTS
  4 .ARM          00000000  08000b10  08000b10  00010b18  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b10  08000b18  00010b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b10  08000b10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b14  08000b14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b18  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b18  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001afb  00000000  00000000  00010b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004df  00000000  00000000  00012643  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000170  00000000  00000000  00012b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00012c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023d5  00000000  00000000  00012dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001397  00000000  00000000  000151a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009813  00000000  00000000  0001653c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001fd4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000538  00000000  00000000  0001fdcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000aec 	.word	0x08000aec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000aec 	.word	0x08000aec

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI2_GPIO_Inits>:
 * PB14- SPI2_MISO
 * PB15- SPI2_MOSI
 * Alternate functionality mode AF5
 */

void SPI2_GPIO_Inits(){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx= GPIOB;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <SPI2_GPIO_Inits+0x58>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 800021e:	2305      	movs	r3, #5
 8000220:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_ALTFN;
 8000222:	2302      	movs	r3, #2
 8000224:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//nss
	SPIPins.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_12;
 8000232:	230c      	movs	r3, #12
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f965 	bl	8000508 <GPIO_Init>

	//sck
	SPIPins.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_13;
 800023e:	230d      	movs	r3, #13
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f95f 	bl	8000508 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_15;
 800024a:	230f      	movs	r3, #15
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f959 	bl	8000508 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_14;
 8000256:	230e      	movs	r3, #14
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f953 	bl	8000508 <GPIO_Init>

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <SPI2_Inits>:

void SPI2_Inits(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx=SPI2;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <SPI2_Inits+0x38>)
 8000278:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_DeviceMode= SPI_DEVICE_MODE_MASTER;
 800027a:	2301      	movs	r3, #1
 800027c:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig= SPI_BUS_CONFIG_FD;
 800027e:	2301      	movs	r3, #1
 8000280:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 8000282:	2300      	movs	r3, #0
 8000284:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_CPOL= SPI_CPOL_LOW;
 8000286:	2300      	movs	r3, #0
 8000288:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed=SPI_SCLK_SPEED_DIV2; //Generates clock of 16/2 MHz
 800028a:	2300      	movs	r3, #0
 800028c:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF= SPI_DFF_8BITS;
 800028e:	2300      	movs	r3, #0
 8000290:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000292:	2301      	movs	r3, #1
 8000294:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fb31 	bl	8000900 <SPI_Init>
}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40003800 	.word	0x40003800

080002ac <main>:

int main(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	SPI_PeriClockControl(SPI2, ENABLE);
 80002b2:	2101      	movs	r1, #1
 80002b4:	4815      	ldr	r0, [pc, #84]	; (800030c <main+0x60>)
 80002b6:	f000 fab3 	bl	8000820 <SPI_PeriClockControl>
	SPI2_GPIO_Inits();
 80002ba:	f7ff ffab 	bl	8000214 <SPI2_GPIO_Inits>
	SPI2_Inits();
 80002be:	f7ff ffd7 	bl	8000270 <SPI2_Inits>
	char user_data[]= "Hello World";
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <main+0x64>)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//TO prevent MODF ERROR
	SPI_SSIConfig(SPI2, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	480f      	ldr	r0, [pc, #60]	; (800030c <main+0x60>)
 80002d0:	f000 fbcc 	bl	8000a6c <SPI_SSIConfig>

	SPI_PeripheralControl(SPI2, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480d      	ldr	r0, [pc, #52]	; (800030c <main+0x60>)
 80002d8:	f000 fbac 	bl	8000a34 <SPI_PeripheralControl>
    SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff90 	bl	8000204 <strlen>
 80002e4:	4602      	mov	r2, r0
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <main+0x60>)
 80002ec:	f000 fb6c 	bl	80009c8 <SPI_SendData>

    while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80002f0:	bf00      	nop
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <main+0x60>)
 80002f6:	f000 fb53 	bl	80009a0 <SPI_GetFlagStatus>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f8      	bne.n	80002f2 <main+0x46>
    SPI_PeripheralControl(SPI2, DISABLE);
 8000300:	2100      	movs	r1, #0
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <main+0x60>)
 8000304:	f000 fb96 	bl	8000a34 <SPI_PeripheralControl>

    while(1){
 8000308:	e7fe      	b.n	8000308 <main+0x5c>
 800030a:	bf00      	nop
 800030c:	40003800 	.word	0x40003800
 8000310:	08000b04 	.word	0x08000b04

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 fbaf 	bl	8000aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffb1 	bl	80002ac <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	08000b18 	.word	0x08000b18
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <GPIO_PeriClockControl>:
 *
 *
 */


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
if (EnorDi == ENABLE){
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d157      	bne.n	800042a <GPIO_PeriClockControl+0xc2>
	if (pGPIOx == GPIOA){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a59      	ldr	r2, [pc, #356]	; (80004e4 <GPIO_PeriClockControl+0x17c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x28>
		GPIOA_PCLK_EN();
 8000382:	4b59      	ldr	r3, [pc, #356]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a58      	ldr	r2, [pc, #352]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
	else if(pGPIOx == GPIOH){
		GPIOH_PCLK_DI();
	}
}

}
 800038e:	e0a3      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOB){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a56      	ldr	r2, [pc, #344]	; (80004ec <GPIO_PeriClockControl+0x184>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x3e>
		GPIOB_PCLK_EN();
 8000398:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a52      	ldr	r2, [pc, #328]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e098      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOC){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a51      	ldr	r2, [pc, #324]	; (80004f0 <GPIO_PeriClockControl+0x188>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x54>
		GPIOC_PCLK_EN();
 80003ae:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a4d      	ldr	r2, [pc, #308]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e08d      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOD){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a4d      	ldr	r2, [pc, #308]	; (80004f4 <GPIO_PeriClockControl+0x18c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x6a>
		GPIOD_PCLK_EN();
 80003c4:	4b48      	ldr	r3, [pc, #288]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a47      	ldr	r2, [pc, #284]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e082      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOE){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a48      	ldr	r2, [pc, #288]	; (80004f8 <GPIO_PeriClockControl+0x190>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x80>
		GPIOE_PCLK_EN();
 80003da:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a42      	ldr	r2, [pc, #264]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e077      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOF){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a44      	ldr	r2, [pc, #272]	; (80004fc <GPIO_PeriClockControl+0x194>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x96>
		GPIOF_PCLK_EN();
 80003f0:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a3c      	ldr	r2, [pc, #240]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e06c      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOG){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a3f      	ldr	r2, [pc, #252]	; (8000500 <GPIO_PeriClockControl+0x198>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0xac>
		GPIOG_PCLK_EN();
 8000406:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a37      	ldr	r2, [pc, #220]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800040c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e061      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOH){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a3b      	ldr	r2, [pc, #236]	; (8000504 <GPIO_PeriClockControl+0x19c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d15d      	bne.n	80004d8 <GPIO_PeriClockControl+0x170>
		GPIOH_PCLK_EN();
 800041c:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a31      	ldr	r2, [pc, #196]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e056      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
if (pGPIOx == GPIOA){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <GPIO_PeriClockControl+0x17c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0xd8>
		GPIOA_PCLK_DI();
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a2c      	ldr	r2, [pc, #176]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e04b      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOB){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <GPIO_PeriClockControl+0x184>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0xee>
		GPIOB_PCLK_DI();
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e040      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOC){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a25      	ldr	r2, [pc, #148]	; (80004f0 <GPIO_PeriClockControl+0x188>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x104>
		GPIOC_PCLK_DI();
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000464:	f023 0304 	bic.w	r3, r3, #4
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e035      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOD){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <GPIO_PeriClockControl+0x18c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x11a>
		GPIOD_PCLK_DI();
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800047a:	f023 0308 	bic.w	r3, r3, #8
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e02a      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOE){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <GPIO_PeriClockControl+0x190>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x130>
		GPIOE_PCLK_DI();
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 8000490:	f023 0310 	bic.w	r3, r3, #16
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e01f      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOF){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <GPIO_PeriClockControl+0x194>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0x146>
		GPIOF_PCLK_DI();
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004a6:	f023 0320 	bic.w	r3, r3, #32
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e014      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOG){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <GPIO_PeriClockControl+0x198>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0x15c>
		GPIOG_PCLK_DI();
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e009      	b.n	80004d8 <GPIO_PeriClockControl+0x170>
	else if(pGPIOx == GPIOH){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <GPIO_PeriClockControl+0x19c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <GPIO_PeriClockControl+0x170>
		GPIOH_PCLK_DI();
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <GPIO_PeriClockControl+0x180>)
 80004d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021400 	.word	0x40021400
 8000500:	40021800 	.word	0x40021800
 8000504:	40021c00 	.word	0x40021c00

08000508 <GPIO_Init>:

/* Init and Deinit */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2101      	movs	r1, #1
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff24 	bl	8000368 <GPIO_PeriClockControl>
	// 1.Configure mode of GPIO PIn
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d81f      	bhi.n	8000568 <GPIO_Init+0x60>
		temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	461a      	mov	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;//clearing
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	4619      	mov	r1, r3
 8000546:	2303      	movs	r3, #3
 8000548:	408b      	lsls	r3, r1
 800054a:	43db      	mvns	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	400a      	ands	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6819      	ldr	r1, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e0a8      	b.n	80006ba <GPIO_Init+0x1b2>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d117      	bne.n	80005a0 <GPIO_Init+0x98>
			//Configure the Falling trigger Selection Register- FTSR
			EXTI->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4ba1      	ldr	r3, [pc, #644]	; (80007f8 <GPIO_Init+0x2f0>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a9d      	ldr	r2, [pc, #628]	; (80007f8 <GPIO_Init+0x2f0>)
 8000582:	430b      	orrs	r3, r1
 8000584:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR
			EXTI->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	4b9c      	ldr	r3, [pc, #624]	; (80007f8 <GPIO_Init+0x2f0>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a97      	ldr	r2, [pc, #604]	; (80007f8 <GPIO_Init+0x2f0>)
 800059a:	400b      	ands	r3, r1
 800059c:	6093      	str	r3, [r2, #8]
 800059e:	e035      	b.n	800060c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d117      	bne.n	80005d8 <GPIO_Init+0xd0>
			//Configure the Rising Trigger Selection Register- RTSR
			EXTI->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b93      	ldr	r3, [pc, #588]	; (80007f8 <GPIO_Init+0x2f0>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a8f      	ldr	r2, [pc, #572]	; (80007f8 <GPIO_Init+0x2f0>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b8e      	ldr	r3, [pc, #568]	; (80007f8 <GPIO_Init+0x2f0>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	43d2      	mvns	r2, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a89      	ldr	r2, [pc, #548]	; (80007f8 <GPIO_Init+0x2f0>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	60d3      	str	r3, [r2, #12]
 80005d6:	e019      	b.n	800060c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b06      	cmp	r3, #6
 80005de:	d115      	bne.n	800060c <GPIO_Init+0x104>
			//configure both the registers FTSR and RTSR
			EXTI->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005e0:	4b85      	ldr	r3, [pc, #532]	; (80007f8 <GPIO_Init+0x2f0>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a81      	ldr	r2, [pc, #516]	; (80007f8 <GPIO_Init+0x2f0>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b80      	ldr	r3, [pc, #512]	; (80007f8 <GPIO_Init+0x2f0>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a7c      	ldr	r2, [pc, #496]	; (80007f8 <GPIO_Init+0x2f0>)
 8000608:	430b      	orrs	r3, r1
 800060a:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO Port Selection in SYSCFG_EXTICR
		uint8_t temp1= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	089b      	lsrs	r3, r3, #2
 8000612:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode= BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a76      	ldr	r2, [pc, #472]	; (80007fc <GPIO_Init+0x2f4>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d02b      	beq.n	8000680 <GPIO_Init+0x178>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a74      	ldr	r2, [pc, #464]	; (8000800 <GPIO_Init+0x2f8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d024      	beq.n	800067c <GPIO_Init+0x174>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a73      	ldr	r2, [pc, #460]	; (8000804 <GPIO_Init+0x2fc>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d01d      	beq.n	8000678 <GPIO_Init+0x170>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a71      	ldr	r2, [pc, #452]	; (8000808 <GPIO_Init+0x300>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d016      	beq.n	8000674 <GPIO_Init+0x16c>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a70      	ldr	r2, [pc, #448]	; (800080c <GPIO_Init+0x304>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d00f      	beq.n	8000670 <GPIO_Init+0x168>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a6e      	ldr	r2, [pc, #440]	; (8000810 <GPIO_Init+0x308>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d008      	beq.n	800066c <GPIO_Init+0x164>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a6d      	ldr	r2, [pc, #436]	; (8000814 <GPIO_Init+0x30c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d101      	bne.n	8000668 <GPIO_Init+0x160>
 8000664:	2306      	movs	r3, #6
 8000666:	e00c      	b.n	8000682 <GPIO_Init+0x17a>
 8000668:	2300      	movs	r3, #0
 800066a:	e00a      	b.n	8000682 <GPIO_Init+0x17a>
 800066c:	2305      	movs	r3, #5
 800066e:	e008      	b.n	8000682 <GPIO_Init+0x17a>
 8000670:	2304      	movs	r3, #4
 8000672:	e006      	b.n	8000682 <GPIO_Init+0x17a>
 8000674:	2303      	movs	r3, #3
 8000676:	e004      	b.n	8000682 <GPIO_Init+0x17a>
 8000678:	2302      	movs	r3, #2
 800067a:	e002      	b.n	8000682 <GPIO_Init+0x17a>
 800067c:	2301      	movs	r3, #1
 800067e:	e000      	b.n	8000682 <GPIO_Init+0x17a>
 8000680:	2300      	movs	r3, #0
 8000682:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000684:	4b64      	ldr	r3, [pc, #400]	; (8000818 <GPIO_Init+0x310>)
 8000686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000688:	4a63      	ldr	r2, [pc, #396]	; (8000818 <GPIO_Init+0x310>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (4 * temp2);
 8000690:	7c7a      	ldrb	r2, [r7, #17]
 8000692:	7cbb      	ldrb	r3, [r7, #18]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	fa02 f103 	lsl.w	r1, r2, r3
 800069a:	4a60      	ldr	r2, [pc, #384]	; (800081c <GPIO_Init+0x314>)
 800069c:	7cfb      	ldrb	r3, [r7, #19]
 800069e:	3302      	adds	r3, #2
 80006a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1<<pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <GPIO_Init+0x2f0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a50      	ldr	r2, [pc, #320]	; (80007f8 <GPIO_Init+0x2f0>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6013      	str	r3, [r2, #0]

	}

	temp=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
	// 2.Configure the Speed
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;//clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	4619      	mov	r1, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	408b      	lsls	r3, r1
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6899      	ldr	r1, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	609a      	str	r2, [r3, #8]
	temp=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]


	// 3.Configure the PuPd setting
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	79db      	ldrb	r3, [r3, #7]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;//clearing
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	4619      	mov	r1, r3
 800071e:	2303      	movs	r3, #3
 8000720:	408b      	lsls	r3, r1
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68d9      	ldr	r1, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
	temp=0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
	// 4. Configure the OP type

	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~ (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;//clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	2301      	movs	r3, #1
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6859      	ldr	r1, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	605a      	str	r2, [r3, #4]
	temp=0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d131      	bne.n	80007ee <GPIO_Init+0x2e6>
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber/8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~ (0xF << (4* temp2)) ;//clearing
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	3208      	adds	r2, #8
 80007a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	220f      	movs	r2, #15
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	4001      	ands	r1, r0
 80007be:	3208      	adds	r2, #8
 80007c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle-> pGPIOx->AFR[temp1] |=  (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2) );
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7c3a      	ldrb	r2, [r7, #16]
 80007ca:	3208      	adds	r2, #8
 80007cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a5b      	ldrb	r3, [r3, #9]
 80007d4:	461a      	mov	r2, r3
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	4301      	orrs	r1, r0
 80007e8:	3208      	adds	r2, #8
 80007ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40021000 	.word	0x40021000
 8000810:	40021400 	.word	0x40021400
 8000814:	40021800 	.word	0x40021800
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800

08000820 <SPI_PeriClockControl>:
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12b      	bne.n	800088a <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <SPI_PeriClockControl+0xcc>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}

	}
}
 8000846:	e04b      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <SPI_PeriClockControl+0xd4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800085c:	e040      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <SPI_PeriClockControl+0xd8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000872:	e035      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SPI_PeriClockControl+0xdc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d131      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000886:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000888:	e02a      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		if (pSPIx == SPI1){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <SPI_PeriClockControl+0xcc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800089e:	e01f      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <SPI_PeriClockControl+0xd4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b4:	e014      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <SPI_PeriClockControl+0xd8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ca:	e009      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <SPI_PeriClockControl+0xdc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	40013400 	.word	0x40013400

08000900 <SPI_Init>:
 *
*/

/* Init and Deinit */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
//First we configure SPI_CR1 Register
	uint32_t tempreg=0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
//1. Configure Device mode
tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]

//2. Configure the BUS_CONFIG
if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d104      	bne.n	800092c <SPI_Init+0x2c>
	//BIDI (Bi-directional mode should be cleared
	tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e014      	b.n	8000956 <SPI_Init+0x56>

} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d104      	bne.n	800093e <SPI_Init+0x3e>
	// BIDI mode should be set
	tempreg |= 1<< SPI_CR1_BIDIMODE;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e00b      	b.n	8000956 <SPI_Init+0x56>

} else if(pSPIHandle-> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d107      	bne.n	8000956 <SPI_Init+0x56>
	//BIDI mode should be cleared
	tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094c:	60fb      	str	r3, [r7, #12]
	//RXONLY bit must be set
	tempreg |= (1<< SPI_CR1_RXONLY);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000954:	60fb      	str	r3, [r7, #12]
}
//3. SPI clock
	tempreg |= (pSPIHandle ->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR );
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	799b      	ldrb	r3, [r3, #6]
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]

//4. Configure the DFF
	tempreg |= (pSPIHandle ->SPIConfig.SPI_DFF << SPI_CR1_DFF );
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	79db      	ldrb	r3, [r3, #7]
 8000968:	02db      	lsls	r3, r3, #11
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4313      	orrs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]

//5. Configure CPOL
	tempreg |= (pSPIHandle ->SPIConfig.SPI_CPOL << SPI_CR1_CPOL );
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7a1b      	ldrb	r3, [r3, #8]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

//6. Configure CPHA
	tempreg |= (pSPIHandle ->SPIConfig.SPI_CPHA << SPI_CR1_CPHA );
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1= tempreg;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SPI_GetFlagStatus>:


/*
 * Function to tell if the flag is set or not
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SPI_SendData>:
 *
 * @note- This is a blocking call (while loops)
 *
*/

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]

	while(Len>0){
 80009d4:	e027      	b.n	8000a26 <SPI_SendData+0x5e>
		//1. Wait until TXE is SET
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009d6:	bf00      	nop
 80009d8:	2102      	movs	r1, #2
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff ffe0 	bl	80009a0 <SPI_GetFlagStatus>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0f8      	beq.n	80009d8 <SPI_SendData+0x10>

		//2. Check the DFF Bit in CR1
		if((pSPIx -> CR1 & ( 1 << SPI_CR1_DFF)) ){
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00e      	beq.n	8000a10 <SPI_SendData+0x48>
			//16 bit DFF
			pSPIx -> DR = *((uint16_t*)pTxBuffer);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	60da      	str	r2, [r3, #12]
			Len--;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
			Len--;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	e00a      	b.n	8000a26 <SPI_SendData+0x5e>
		}else{
			//8 Bit DFF
			pSPIx -> DR = *(pTxBuffer);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	60da      	str	r2, [r3, #12]
			Len--;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1d4      	bne.n	80009d6 <SPI_SendData+0xe>
		}
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SPI_PeripheralControl>:
}
/*
 * Other Peripheral control APIs
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000a52:	e005      	b.n	8000a60 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SPI_SSIConfig>:
	//4. Data transmission will be handled by the ISR Code
	return state;

}

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1<< SPI_CR1_SSI);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SSI);
	}
}
 8000a8a:	e005      	b.n	8000a98 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SSI);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <__libc_init_array>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	4e0d      	ldr	r6, [pc, #52]	; (8000adc <__libc_init_array+0x38>)
 8000aa8:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <__libc_init_array+0x3c>)
 8000aaa:	1ba4      	subs	r4, r4, r6
 8000aac:	10a4      	asrs	r4, r4, #2
 8000aae:	2500      	movs	r5, #0
 8000ab0:	42a5      	cmp	r5, r4
 8000ab2:	d109      	bne.n	8000ac8 <__libc_init_array+0x24>
 8000ab4:	4e0b      	ldr	r6, [pc, #44]	; (8000ae4 <__libc_init_array+0x40>)
 8000ab6:	4c0c      	ldr	r4, [pc, #48]	; (8000ae8 <__libc_init_array+0x44>)
 8000ab8:	f000 f818 	bl	8000aec <_init>
 8000abc:	1ba4      	subs	r4, r4, r6
 8000abe:	10a4      	asrs	r4, r4, #2
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	d105      	bne.n	8000ad2 <__libc_init_array+0x2e>
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000acc:	4798      	blx	r3
 8000ace:	3501      	adds	r5, #1
 8000ad0:	e7ee      	b.n	8000ab0 <__libc_init_array+0xc>
 8000ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ad6:	4798      	blx	r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e7f2      	b.n	8000ac2 <__libc_init_array+0x1e>
 8000adc:	08000b10 	.word	0x08000b10
 8000ae0:	08000b10 	.word	0x08000b10
 8000ae4:	08000b10 	.word	0x08000b10
 8000ae8:	08000b14 	.word	0x08000b14

08000aec <_init>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	bf00      	nop
 8000af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af2:	bc08      	pop	{r3}
 8000af4:	469e      	mov	lr, r3
 8000af6:	4770      	bx	lr

08000af8 <_fini>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	bf00      	nop
 8000afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afe:	bc08      	pop	{r3}
 8000b00:	469e      	mov	lr, r3
 8000b02:	4770      	bx	lr
